# OpenMP + Nanos
[omp-base-common]
options = --openmp
{omp-dry-run|openmp-dry-run} options = --variable=omp_dry_run:1
{debug} options = -g
{@NANOX_GATE@,debug} options = --variable=nanos-debug:1
{(instrument|instrumentation)} options = --variable=instrument:1
preprocessor_name = @GCC@
preprocessor_options = -E
compiler_name = @GCC@
compiler_options =
linker_name = @GCC@
{openmp} compiler_phase = libtlomp-base.so

#analysis
{analysis} compiler_phase = libtest_analysis.so
{analysis-verbose} options = --debug-flags=analysis_verbose
{pcfg} options = --variable=pcfg_enabled:1
{use-def} options = --variable=use_def_enabled:1
{liveness} options = --variable=liveness_enabled:1
{reaching-defs} options = --variable=reaching_defs_enabled:1
{induction-vars} options = --variable=induction_vars_enabled:1
{task-sync-tune} options = --variable=task_sync_tune_enabled:1
{range} options = --variable=range_analysis_enabled:1
{complexity} options = --variable=cyclomatic_complexity_enabled:1
{auto-scope} compiler_phase = libtlomp_auto_scope.so
{auto-scope} options = --variable=auto_scope_enabled:1
{tdg} options = --variable=tdg_enabled:1
{analysis-check} pragma_prefix = analysis_check
{analysis-check} compiler_phase = libanalysis_check.so
{(openmp|ompss), (openmp-lint|task-correctness), !analysis-check} compiler_phase = libtlomp-lint.so
{(openmp|ompss), (openmp-lint|task-correctness)} options = --variable=correctness_log_dir:@CORRECTNESS_LOG_DIR@
{openmp-lint} options = --variable=lint_deprecated_flag:1

#simd
{openmp, simd} compiler_phase = libtlomp-simd.so
{openmp, simd} compiler_phase = libtlvector-lowering.so

# nanos++
{@NANOX_GATE@,openmp} pragma_prefix = nanos
{@NANOX_GATE@,openmp} compiler_phase = libtlnanos-version.so
{ompss} preprocessor_options = -D_OMPSS=1
{openmp} fortran_preprocessor_options = -D_OPENMP=200805
{ompss} fortran_preprocessor_options = -D_OMPSS=1

#simd
{svml} preprocessor_options = -include math.h
{simd, !(mmic|knl|avx2|neon|romol)} preprocessor_options = @SIMD_INCLUDES@ @SIMD_FLAGS@
{simd, !(mmic|knl|avx2|neon|romol)} compiler_options = @SIMD_FLAGS@
{simd} options = --variable=simd_enabled:1
{svml} options = --variable=svml_enabled:1
{svml} linker_options = -lsvml
{mmic} linker_options = -mmic
{knl} preprocessor_options = -xMIC-AVX512
{knl} compiler_options = -xMIC-AVX512
{knl} linker_options = -xMIC-AVX512 -lifcore -limf -lirng -lintlc
{fast-math} options = --variable=fast_math_enabled:1
{simd, knl} options = --variable=knl_enabled:1
{simd, mmic} options = --variable=mic_enabled:1
{simd, avx2} options = --variable=avx2_enabled:1
{simd, neon} options = --variable=neon_enabled:1
{simd, (romol|valib)} options = --variable=romol_enabled:1
{simd, (romol|valib)} preprocessor_options = -I @PKGDATADIR@/romol -include valib.h
{simd, (romol|valib), valib-sim} preprocessor_options = -DVALIB_HIDE_DECLS
{simd, (romol|valib), valib-sim} options = --variable=valib_sim_header:1
{(mmic|knl)} preprocessor_options = -include immintrin.h
{simd, avx2} preprocessor_options = -O -mavx2 -include immintrin.h
{simd, avx2} compiler_options = -mavx2
{simd,neon} preprocessor_options = -mfpu=neon -include arm_neon.h
{simd,neon} compiler_options = -mfpu=neon
{simd,neon} linker_options = -mfpu=neon
{neon} options = --vector-flavor=neon
{romol} options = --vector-flavor=romol
{!(neon|romol)} options = --vector-flavor=gnu

{@NANOX_GATE@,cluster} options = --variable=nanos_main_enabled:1

#omp
{ompss} options = --variable=ompss_mode:1
{!ompss} options = --variable=copy_deps_by_default:0
{ompss,!?copy-deps|copy-deps} options = --variable=copy_deps_by_default:1
{ompss,?copy-deps,!copy-deps} options = --variable=copy_deps_by_default:0

{!ompss} options = --variable=untied_tasks_by_default:0
{ompss,(!?untied-tasks|untied-tasks),!?tied-tasks} options = --variable=untied_tasks_by_default:1
{ompss,tied-tasks,!?untied-tasks} options = --variable=untied_tasks_by_default:0

{@NANOX_GATE@,openmp,!do-not-lower-omp} compiler_phase = libtlnanox-lowering.so
{@NANOX_GATE@,openmp,!do-not-lower-omp} compiler_phase = libtlnanox-smp.so
{@NANOX_GATE@,openmp,!do-not-lower-omp} compiler_phase = libtlnanox-nanosmain.so

# Force ompss for Nanos 6 (unless explicitly disabled)
{@NANOS6_GATE@,!?ompss} preprocessor_options = -D_OMPSS=1
{@NANOS6_GATE@,!?ompss} fortran_preprocessor_options = -D_OMPSS=1
{@NANOS6_GATE@,!?ompss} options = --variable=ompss_mode:1
{@NANOS6_GATE@,!?ompss,!?copy-deps|copy-deps} options = --variable=copy_deps_by_default:1
{@NANOS6_GATE@,!?ompss,?copy-deps,!copy-deps} options = --variable=copy_deps_by_default:0
{@NANOS6_GATE@,!?ompss,(!?untied-tasks|untied-tasks),!?tied-tasks} options = --variable=untied_tasks_by_default:1
{@NANOS6_GATE@,!?ompss,tied-tasks,!?untied-tasks} options = --variable=untied_tasks_by_default:0
{@NANOS6_GATE@,openmp,!do-not-lower-omp} compiler_phase = libtlnanos6-lowering.so

#simd
{prefer-gather-scatter} options = --variable=prefer_gather_scatter:1
{prefer-mask-gather-scatter} options = --variable=prefer_mask_gather_scatter:1
{only-adjacent-accesses} options = --variable=only_adjacent_accesses:1
{only-aligned-accesses} options = --variable=only_aligned_accesses:1
{overlap-in-place} options = --variable=overlap_in_place:1

[omp-base : omp-base-common]
#dlb
{@DLB_GATE@} preprocessor_options = -I@DLB_INCLUDE@
#
linker_options =

linker_options = -Xlinker --enable-new-dtags

#nanos++
{@NANOX_GATE@,openmp,!mmic} preprocessor_options = -I@NANOX_INCLUDES@ -D_OPENMP=200805 -include nanos.h -include nanos_omp.h
{@NANOX_GATE@,openmp,mmic} preprocessor_options = -I@NANOX_MIC_INCLUDES@ -D_OPENMP=200805 -include nanos.h -include nanos_omp.h
{@NANOX_GATE@,openmp,!(omp-dry-run|openmp-dry-run),!debug,!(instrument|instrumentation),!mmic} linker_options = -L@NANOX_LIBS@/performance -Xlinker @RPATH_PARAMETER@ -Xlinker @NANOX_LIBS@/performance
{@NANOX_GATE@,openmp,!(omp-dry-run|openmp-dry-run),debug,!(instrument|instrumentation),!mmic} linker_options = -L@NANOX_LIBS@/debug -Xlinker @RPATH_PARAMETER@ -Xlinker @NANOX_LIBS@/debug
{@NANOX_GATE@,openmp,!(omp-dry-run|openmp-dry-run),!debug,(instrument|instrumentation),!mmic} linker_options = -L@NANOX_LIBS@/instrumentation -Xlinker @RPATH_PARAMETER@ -Xlinker @NANOX_LIBS@/instrumentation
{@NANOX_GATE@,openmp,!(omp-dry-run|openmp-dry-run),debug,(instrument|instrumentation),!mmic} linker_options = -L@NANOX_LIBS@/instrumentation-debug -Xlinker @RPATH_PARAMETER@ -Xlinker @NANOX_LIBS@/instrumentation-debug
{@NANOX_GATE@,openmp,!(omp-dry-run|openmp-dry-run),!debug,!(instrument|instrumentation),mmic} linker_options = -L@NANOX_MIC_LIBS@/performance -Xlinker @RPATH_PARAMETER@ -Xlinker @NANOX_MIC_LIBS@/performance
{@NANOX_GATE@,openmp,!(omp-dry-run|openmp-dry-run),debug,!(instrument|instrumentation),mmic} linker_options = -L@NANOX_MIC_LIBS@/debug -Xlinker @RPATH_PARAMETER@ -Xlinker @NANOX_MIC_LIBS@/debug
{@NANOX_GATE@,openmp,!(omp-dry-run|openmp-dry-run),!debug,(instrument|instrumentation),mmic} linker_options = -L@NANOX_MIC_LIBS@/instrumentation -Xlinker @RPATH_PARAMETER@ -Xlinker @NANOX_MIC_LIBS@/instrumentation
{@NANOX_GATE@,openmp,!(omp-dry-run|openmp-dry-run),debug,(instrument|instrumentation),mmic} linker_options = -L@NANOX_MIC_LIBS@/instrumentation-debug -Xlinker @RPATH_PARAMETER@ -Xlinker @NANOX_MIC_LIBS@/instrumentation-debug
# Old linking mechanism (libnanox-omp.so | libnanox-ss.so + libnanox-omp.so)
{@NANOX_GATE@,@NANOX_OLD_LINK@,openmp,!(omp-dry-run|openmp-dry-run),!ompss} linker_options = @CUDA_RPATH@ -Xlinker --no-as-needed -lnanox-omp -lnanox-c -lnanox -lpthread -lrt
{@NANOX_GATE@,@NANOX_OLD_LINK@,openmp,!(omp-dry-run|openmp-dry-run),ompss} linker_options = @CUDA_RPATH@ -Xlinker --no-as-needed -lnanox-ss -lnanox-omp -lnanox-c -lnanox -lpthread -lrt
# New linking mechanism (libnanox-omp.so | libnanox-ompss.so)
{@NANOX_GATE@,@NANOX_NEW_LINK@,openmp,!(omp-dry-run|openmp-dry-run),!ompss} linker_options = @CUDA_RPATH@ -Xlinker --no-as-needed -lnanox-omp -lnanox-c -lnanox -lpthread -lrt
{@NANOX_GATE@,@NANOX_NEW_LINK@,openmp,!(omp-dry-run|openmp-dry-run),ompss} linker_options = @CUDA_RPATH@ -Xlinker --no-as-needed -lnanox-ompss -lnanox-c -lnanox -lpthread -lrt
# used by XL
{@NANOX_GATE@,(openmp|ompss),!(omp-dry-run|openmp-dry-run)} linker_options = @NANOX_GNU_LDFLAGS@
# needed for the new link mechanism
{@NANOX_GATE@} linker_options = -Xlinker --dynamic-list=@PKGDATADIR@/nanos/nanos-exports.def

#nanos 6
{@NANOS6_GATE@,openmp} pragma_prefix = oss
{@NANOS6_GATE@,openmp}preprocessor_options = -I@NANOS6_INCLUDES@ -include nanos6_rt_interface.h
{@NANOS6_GATE@} linker_options = -L@NANOS6_LIB@
{@NANOS6_GATE@,openmp}linker_options = @NANOS6_LIB@/libnanos6-main-wrapper.a -lnanos6 -ldl
{@NANOS6_GATE@} linker_options = -Xlinker @RPATH_PARAMETER@ -Xlinker @NANOS6_LIB@

# dlb
{@DLB_GATE@} linker_options = -L@DLB_LIB@
{@DLB_GATE@,!(instrument|instrumentation|debug)} linker_options= -ldlb
{@DLB_GATE@,!(instrument|instrumentation),debug} linker_options = -ldlb_dbg
{@DLB_GATE@,(instrument|instrumentation),!debug} linker_options  = -ldlb_instr
{@DLB_GATE@,(instrument|instrumentation),debug} linker_options  = -ldlb_instr_dbg
{@DLB_GATE@} linker_options = -Xlinker @RPATH_PARAMETER@ -Xlinker @DLB_LIB@

[omp-base-ibm : omp-base-common]
#dlb
{@DLB_GATE@} preprocessor_options = -I@DLB_INCLUDE@
#
linker_options =
#nanos++
{@NANOX_GATE@,openmp} preprocessor_options = -I@NANOX_INCLUDES@ -D_OPENMP=200805 -qinclude=nanos.h -qinclude=nanos_omp.h
linker_options = -Wl,--enable-new-dtags
{@NANOX_GATE@,openmp,!(omp-dry-run|openmp-dry-run),!debug,!(instrument|instrumentation)} linker_options = -L@NANOX_LIBS@/performance -Wl,@RPATH_PARAMETER@,@NANOX_LIBS@/performance
{@NANOX_GATE@,openmp,!(omp-dry-run|openmp-dry-run),debug,!(instrument|instrumentation)} linker_options = -L@NANOX_LIBS@/debug -Wl,@RPATH_PARAMETER@,@NANOX_LIBS@/debug
{@NANOX_GATE@,openmp,!(omp-dry-run|openmp-dry-run),!debug,(instrument|instrumentation)} linker_options = -L@NANOX_LIBS@/instrumentation -Wl,@RPATH_PARAMETER@,@NANOX_LIBS@/instrumentation
{@NANOX_GATE@,openmp,!(omp-dry-run|openmp-dry-run),debug,(instrument|instrumentation)} linker_options = -L@NANOX_LIBS@/instrumentation-debug -Wl,@RPATH_PARAMETER@,@NANOX_LIBS@/instrumentation-debug
# Old linking mechanism (libnanox-omp.so | libnanox-ss.so + libnanox-omp.so)
{@NANOX_GATE@,@NANOX_OLD_LINK@,openmp,!(omp-dry-run|openmp-dry-run),!ompss} linker_options = @CUDA_RPATH@ -Wl,--no-as-needed -lnanox-omp -lnanox-c -lnanox -lpthread -lrt
{@NANOX_GATE@,@NANOX_OLD_LINK@,openmp,!(omp-dry-run|openmp-dry-run),ompss} linker_options = @CUDA_RPATH@ -Wl,--no-as-needed -lnanox-ss -lnanox-omp -lnanox-c -lnanox -lpthread -lrt
# New linking mechanism (libnanox-omp.so | libnanox-ompss.so)
{@NANOX_GATE@,@NANOX_NEW_LINK@,openmp,!(omp-dry-run|openmp-dry-run),!ompss} linker_options = @CUDA_RPATH@ -Wl,--no-as-needed -lnanox-omp -lnanox-c -lnanox -lpthread -lrt
{@NANOX_GATE@,@NANOX_NEW_LINK@,openmp,!(omp-dry-run|openmp-dry-run),ompss} linker_options = @CUDA_RPATH@ -Wl,--no-as-needed -lnanox-ompss -lnanox-c -lnanox -lpthread -lrt
# used by XL
{@NANOX_GATE@,(openmp|ompss),!(omp-dry-run|openmp-dry-run)} linker_options = @NANOX_IBM_LDFLAGS@
# needed for the new link mechanism
{@NANOX_GATE@} linker_options = -Wl,--dynamic-list=@PKGDATADIR@/nanos/nanos-exports.def
# dlb
{@DLB_GATE@} linker_options = -L@DLB_LIB@
{@DLB_GATE@,!(instrument|instrumentation|debug)} linker_options = -ldlb
{@DLB_GATE@,!(instrument|instrumentation),debug} linker_options = -ldlb_dbg
{@DLB_GATE@,(instrument|instrumentation),!debug} linker_options = -ldlb_instr
{@DLB_GATE@,(instrument|instrumentation),debug} linker_options = -ldlb_instr_dbg
{@DLB_GATE@} linker_options = -Xlinker @RPATH_PARAMETER@ -Xlinker @DLB_LIB@
